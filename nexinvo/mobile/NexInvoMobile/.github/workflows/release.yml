name: Release Pipeline

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      platform:
        description: 'Platform to release'
        required: true
        default: 'both'
        type: choice
        options:
          - ios
          - android
          - both

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '11'
  RUBY_VERSION: '3.0'

jobs:
  # Version bump and tag creation
  version:
    name: Version Management
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version
        id: version
        run: |
          npm version ${{ github.event.inputs.release_type }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "New version: ${NEW_VERSION}"

      - name: Generate changelog
        id: changelog
        run: |
          npx conventional-changelog -p angular -i CHANGELOG.md -s
          CHANGELOG=$(cat CHANGELOG.md | head -50)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update version in native files
        run: |
          # Update iOS version
          sed -i "s/MARKETING_VERSION = .*/MARKETING_VERSION = ${{ steps.version.outputs.new_version }};/g" ios/NexInvoMobile.xcodeproj/project.pbxproj

          # Update Android version
          NEW_VERSION_CODE=$(($(grep versionCode android/app/build.gradle | grep -o '[0-9]*') + 1))
          sed -i "s/versionName .*/versionName \"${{ steps.version.outputs.new_version }}\"/g" android/app/build.gradle
          sed -i "s/versionCode .*/versionCode ${NEW_VERSION_CODE}/g" android/app/build.gradle

      - name: Commit and tag
        run: |
          git add .
          git commit -m "chore(release): bump version to ${{ steps.version.outputs.new_version }}"
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin main --tags

  # Pre-release validation
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    needs: version
    if: always() && !failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version.outputs.new_version && format('v{0}', needs.version.outputs.new_version) || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: |
          npm run test:unit
          npm run test:integration
          npm run test:performance

      - name: Validate build configuration
        run: |
          npx react-native config
          npx react-native doctor

      - name: Security audit
        run: npm audit --audit-level moderate

  # iOS Release Build
  build-ios:
    name: Build iOS Release
    runs-on: macos-latest
    needs: [version, validate]
    if: |
      always() && !failure() &&
      (github.event.inputs.platform == 'ios' || github.event.inputs.platform == 'both' || github.event_name == 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version.outputs.new_version && format('v{0}', needs.version.outputs.new_version) || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install dependencies
        run: |
          npm ci
          cd ios && bundle install

      - name: Setup certificates and provisioning profiles
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
        run: |
          echo $IOS_CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          echo $IOS_PROVISIONING_PROFILE_BASE64 | base64 --decode > profile.mobileprovision

          security create-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P $IOS_CERTIFICATE_PASSWORD -T /usr/bin/codesign
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          bundle exec pod install

      - name: Build iOS app
        run: |
          cd ios
          xcodebuild -workspace NexInvoMobile.xcworkspace \
                     -scheme NexInvoMobile \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath build/NexInvoMobile.xcarchive \
                     archive

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
                     -archivePath build/NexInvoMobile.xcarchive \
                     -exportPath build/ \
                     -exportOptionsPlist ExportOptions.plist

      - name: Upload to TestFlight
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          FASTLANE_SESSION: ${{ secrets.FASTLANE_SESSION }}
        run: |
          cd ios
          bundle exec fastlane beta

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ios-release
          path: ios/build/*.ipa

  # Android Release Build
  build-android:
    name: Build Android Release
    runs-on: ubuntu-latest
    needs: [version, validate]
    if: |
      always() && !failure() &&
      (github.event.inputs.platform == 'android' || github.event.inputs.platform == 'both' || github.event_name == 'release')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version.outputs.new_version && format('v{0}', needs.version.outputs.new_version) || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Install dependencies
        run: npm ci

      - name: Setup signing key
        env:
          ANDROID_SIGNING_KEY: ${{ secrets.ANDROID_SIGNING_KEY }}
        run: |
          echo $ANDROID_SIGNING_KEY | base64 --decode > android/app/release.keystore

      - name: Build Android release
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          cd android
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=release.keystore \
            -Pandroid.injected.signing.store.password=$ANDROID_KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$ANDROID_KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$ANDROID_KEY_PASSWORD

      - name: Upload to Play Console
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        run: |
          echo $GOOGLE_PLAY_SERVICE_ACCOUNT_JSON | base64 --decode > service_account.json
          cd android
          bundle exec fastlane beta

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v3
        with:
          name: android-release
          path: android/app/build/outputs/apk/release/*.apk

  # Post-release tasks
  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [build-ios, build-android]
    if: always() && !failure()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        if: needs.version.outputs.new_version
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          release_name: Release v${{ needs.version.outputs.new_version }}
          body: |
            ${{ needs.version.outputs.changelog }}

            ## What's Changed
            - iOS Build: Available on TestFlight
            - Android Build: Available on Play Console Internal Testing

            ## Installation
            - iOS: Check TestFlight for the latest build
            - Android: Download from Play Console or install APK directly
          draft: false
          prerelease: false

      - name: Update documentation
        run: |
          # Update README with new version
          sed -i "s/Version: .*/Version: ${{ needs.version.outputs.new_version }}/g" README.md

          # Generate API documentation
          npm run docs:generate || true

      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          message: |
            🚀 **Release v${{ needs.version.outputs.new_version }} deployed successfully!**

            **Platforms:** ${{ github.event.inputs.platform || 'both' }}
            **iOS:** Available on TestFlight
            **Android:** Available on Play Console

            **Release Notes:** https://github.com/${{ github.repository }}/releases/tag/v${{ needs.version.outputs.new_version }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Update Sentry release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        run: |
          npx @sentry/wizard -s \
            --url https://sentry.io/ \
            --auth-token $SENTRY_AUTH_TOKEN \
            create-release \
            --version ${{ needs.version.outputs.new_version }}

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [build-ios, build-android]
    if: failure()
    steps:
      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#alerts'
          message: |
            ❌ **Release v${{ needs.version.outputs.new_version }} failed!**

            **Failed Step:** ${{ github.job }}
            **Platform:** ${{ github.event.inputs.platform || 'both' }}

            Please check the workflow logs and consider rolling back if necessary.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create incident
        run: |
          # Create incident in your incident management system
          echo "Creating incident for failed release..."